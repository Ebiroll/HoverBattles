Introduction
-----------

We've been tasked with the job of writing the next Amazon by an enterpreneur (me) on Craigslist. He has all the ideas but can't code, so he has hired you who (he can't pay just yet but will totally share the profit when his company is ultimately successful) - Oh, and he also has some possible VC funding as he has a tenuous link to a VC fund you haven't heard of, but probably should have. 

The 'Must Have' features have been decided up front, as he knows what exactly what he wants and we haven't got a say in the matter as we're a developer and can't possibly have any ideas. It is our job to come up with a suitable document model for these features and come up with the queries we'll need against thils.

Note: For this exercise we're focusing on the documents and the queries, as they are technically complex - however, we'll need to bear the required logic in mind as this will have a bearing on our document model.

Further note: The order in which we solve these requirements is up to you, they're ordered in the order the user would encounter them - not in implementation order.

Product description
----------

When the user first visits our landing page, he'll see a number of 'widgets', each displaying the following:

- The most popular purchased items across the site (with links to those items andinformation about those items)
- The top 'rated' items across the site
- A tag cloud of *recent* tags people have assigned to products (this past week)
- Any special offers currently active on the site
- Their current shopping basket (if they have one)
- A link to a search page (or search box that directs to a search page at least)

When browsing to an item, we'll be given all the usual details about that product (such as the name, description and price), as well as the tags that people have used to describe that product and the comments that people have left for those products.

Ah yes, the comments - users, as well as being able to tag a product with useful information,
they can comment on a product, as well as leaving a rating (out of five) for that product at the same time. 
Other users can vote up or down these comments - and they are therefore sorted by the ratings 
that have been placed on them.

Back to the search page, we'll have a simple text entry available, where we type in a search term and get back a list of products which (at the very least) ordered by the number of positive comments they have received. Further work could be achieved here by providing facets to drill down into the results.

Now, when the user decides to purchase an item, it is first added to his shopping basket. When he finally decides to check out the item, we'll take the lowest price available (either the one that's currently the price of the product, or the price it was when he first added it to his shopping basket).

Clicking purchase will bring him to an external system for managing payments (ie, no code or modelling from us), and when this is complete the shopping basket will be transferred to a shipment that will store historical information about the product purchased for reporting purposes.